#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>

int main(int argc, char** argv)
{
	if(argv[1]==NULL) return 1;
//	argv[1]="/dev/video0";
	ros::init(argc,argv,"image_publisher");
	ros::NodeHandle nh;
	image_transport::ImageTransport it(nh);
	image_transport::Publisher pub=it.advertise("camera/image",1);

//	cv::Mat image=cv::imread(argv[1], CV_LOAD_IMAGE_COLOR);
//	cv::waitKey(30);
//	sensor_msgs::ImagePtr msg=cv_bridge::CvImage(std_msgs::Header(),"bgr8", image).toImageMsg();
	std::istringstream video_sourceCmd(argv[1]);
  	int video_source;
  	// Check if it is indeed a number
  	if(!(video_sourceCmd >> video_source)) return 1;

	cv::VideoCapture cap(video_source);
  	// Check if video device can be opened with the given index
  	if(!cap.isOpened()) return 1;
  	cv::Mat frame;
  	sensor_msgs::ImagePtr msg;

  
	ros::Rate loop_rate(5);
	while(nh.ok())
	{
		cap >> frame;
		if(!frame.empty())
		{
			msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();
      			pub.publish(msg);
      			cv::waitKey(1);
		}
		
		ros::spinOnce();
		loop_rate.sleep();
	}

}
